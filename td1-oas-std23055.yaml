openapi: 3.0.0
info:
  title: Library Management API
  description: API for managing books and authors in a library.
  version: 1.0.0
servers:
    - url: https://virtserver.swaggerhub.com/HEITIAVINA3/ApiLibraryManagement/1.0.0
      description: SwaggerHub API Auto Mocking
paths:
  /books:
    get:
      summary: Retrieve a list of books
      description: Get all books, with optional filters by book name and release date range.
      parameters:
        - name: bookName
          in: query
          description: Filter books by name
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: Filter books released after this date (inclusive)
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Filter books released before this date (inclusive)
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book successfully created
    put:
      summary: Update an existing book
      description: Idempotent operation to update a book.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book successfully updated
    delete:
      summary: Delete a book
      parameters:
        - name: id
          in: query
          description: ID of the book to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Book successfully deleted
  /authors:
    get:
      summary: Retrieve a list of authors
      description: Get all authors, with optional filter by author name.
      parameters:
        - name: authorName
          in: query
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Add a new author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author successfully created
    put:
      summary: Update an existing author
      description: Idempotent operation to update an author.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Author successfully updated
    delete:
      summary: Delete an author
      parameters:
        - name: id
          in: query
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Author successfully deleted
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the book
        bookName:
          type: string
        author:
          type: string
          description: Name of the author
        pageNumbers:
          type: integer
          description: Number of pages in the book
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the author
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F